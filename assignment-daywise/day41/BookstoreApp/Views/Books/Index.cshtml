@model IEnumerable<BookstoreApp.Models.Book>

@{
    ViewData["Title"] = "Books";
}

<h1>Books Management</h1>

@if (ViewBag.DemoType != null)
{
    <div class="alert alert-info">
        <strong>Demo Mode:</strong> Displaying data using @ViewBag.DemoType (Disconnected Architecture)
    </div>
}

@if (ViewBag.SearchTerm != null)
{
    <div class="alert alert-primary">
        <strong>Search Results for:</strong> "@ViewBag.SearchTerm"
        <a href="@Url.Action("Index")" class="btn btn-sm btn-outline-primary ms-2">Show All Books</a>
    </div>
}

<p>
    <a asp-action="Create" class="btn btn-success">
        <i class="bi bi-plus-circle"></i> Create New Book
    </a>
</p>

@if (!Model.Any())
{
    <div class="alert alert-warning">
        <h4>No books found</h4>
        <p>There are currently no books in the database. <a asp-action="Create">Add the first book</a>.</p>
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Title</th>
                    <th>Author</th>
                    <th>Category</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Created Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            <strong>@Html.DisplayFor(modelItem => item.Title)</strong>
                            @if (!string.IsNullOrEmpty(item.Description))
                            {
                                <br />
                                <small class="text-muted">@item.Description.Substring(0, Math.Min(item.Description.Length, 50))...</small>
                            }
                        </td>
                        <td>@Html.DisplayFor(modelItem => item.Author)</td>
                        <td>
                            <span class="badge bg-secondary">@Html.DisplayFor(modelItem => item.Category)</span>
                        </td>
                        <td>
                            <strong class="text-success">$@Html.DisplayFor(modelItem => item.Price)</strong>
                        </td>
                        <td>
                            @if (item.Stock > 0)
                            {
                                <span class="badge bg-success">@item.Stock in stock</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Out of stock</span>
                            }
                        </td>
                        <td>@item.CreatedDate.ToString("MMM dd, yyyy")</td>
                        <td>
                            <div class="btn-group" role="group">
                                <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-outline-info">Details</a>
                                <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-outline-primary">Edit</a>
                                <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-outline-danger">Delete</a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="mt-3">
        <small class="text-muted">Total books: @Model.Count()</small>
    </div>
}

<div class="mt-4">
    <h5>ADO.NET Demonstration Links:</h5>
    <div class="btn-group" role="group">
        <a asp-action="Index" class="btn btn-outline-secondary">Connected (SqlDataReader)</a>
        <a asp-action="DataSetDemo" class="btn btn-outline-info">DataSet Demo</a>
        <a asp-action="DataTableDemo" class="btn btn-outline-warning">DataTable Demo</a>
    </div>
</div>
